schema {
  query: Query
  mutation: Mutations
}

type AssignedUser {
  id: ID!
  firstName: String
  lastName: String
  email: String!

  """
  Assigned user organization
  """
  organization: Organization
  roleAssignments: [RoleAssignment]
  roleId: String
  roleName: String
}

type Contract {
  id: ID
  number: String
  name: String
  contractType: ContractType
  createdOn: Date
  billingAccount: String
  endUserAccount: String
  pricePerMonth: Float
  dataLimit: Float
  overagePricePerGb: Float
  minCharge: Float
  pricePerGb: Float
  coldStoragePricePerGb: Float
  specialTerms: String
  contractTerm: String
  url: String
}

enum ContractType {
  transactional
  subscription
  processing
  customBilling
  other
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  organization: CreateUserOrganizationInput!
}

input CreateUserOrganizationInput {
  connect: OrganizationUniqueInput
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type EditUser {
  users(
    """
    Startswith over firstName, lastName and Email. Case insensitive.
    """
    searchText: String
    start: Int
    length: Int = 100
    orderBy: UserSortOrder
    orderByDirection: SortDirection
  ): [User]
  usersCount(searchText: String): Int
  user(id: ID): User
  status: String
}

type EmailDomain {
  domain: String
  organization: Organization
}

enum EntityType {
  reviewdb
  matter
  organization
}

type Mutations {
  severUser(id: ID): User
  editUser(
    assignedOrganizationId: String
    firstName: String
    id: String!
    lastName: String
  ): EditUser
    @deprecated(reason: "this mutation will be replaced by UpdateUser")
  createUser(data: CreateUserInput!): User
  updateUser(data: UpdateUserInput!, where: UserUniqueIdInput!): User
}

type Organization {
  name: String
  id: ID
}

input OrganizationUniqueInput {
  id: ID
}

type Query {
  users(
    """
    Startswith over firstName, lastName and Email. Case insensitive.
    """
    searchText: String
    start: Int
    length: Int = 100
    orderBy: UserSortOrder
    orderByDirection: SortDirection
  ): [User]
  usersCount(searchText: String): Int
  user(id: ID): User
  assignedUsers(
    """
    The type of the entity
    """
    entityType: EntityType

    """
    The id of the entity to which you want to find user assignments.
    """
    entityId: String
  ): [AssignedUser]
    @deprecated(
      reason: "Deprecated in favor of getting assigned users by entity"
    )
  emailDomain(domain: String): EmailDomain
  entity(
    """
    The type of the entity
    """
    entityType: EntityType

    """
    The id of the entity to which you want to find user assignments.
    """
    entityId: String
  ): ScopeEntity
  contracts(searchText: String, contractId: String, count: Int = 10): [Contract]
}

type RoleAssignment {
  role: String
  entityId: ID
  entityName: String
  entityType: String
}

type ScopeEntity {
  id: String
  entityType: String
  name: String
  assignedUsers: [AssignedUser]
  suggestedUsers: [User]
}

enum SortDirection {
  ascending
  descending
}

input UpdateUserInput {
  firstName: String!
  lastName: String!
  organization: UpdateUserOrganizationInput!
}

input UpdateUserOrganizationInput {
  connect: OrganizationUniqueInput
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String!

  """
  Assigned user organization
  """
  organization: Organization
  roleAssignments: [RoleAssignment]
}

enum UserSortOrder {
  lastName
  firstName
  email
}

input UserUniqueIdInput {
  id: ID!
}
